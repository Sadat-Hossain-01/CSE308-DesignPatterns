package observers;

import subject.ABCCompany;

import java.util.Random;

public class RegularUser extends Observer {
    private boolean isPaying;

    public RegularUser(ABCCompany server, String userName) {
        super(server, userName);
        isPaying = false;
    }

    private int getBill(int l, int r) {
        // What is the logic behind the bill getting generated in user end?
        // If the bill was to be generated by server, then that would mean server would need to keep information
        // of user usages, meaning it would need knowledge of the observer classes, which is a violation of the observer
        // pattern. Another way to think about it is that there might be some timestamp attached to every user, in which
        // the service start time gets tracked, from there the bill can be automatically calculated. But since the question
        // just asks to generate a random bill, that is what we are doing.
        Random random = new Random();
        return random.nextInt(r - l + 1) + l;
    }

    @Override
    public void notifyObserver() {
        ABCCompany.State currentState = server.getCurrentState();
        ABCCompany.State previousState = server.getPreviousState();

        showReceivingMessage(currentState.toString());

        int choice = 0;
        boolean inputOn = true;

        if (previousState == ABCCompany.State.OPERATIONAL) {
            if (currentState == ABCCompany.State.PARTIALLY_DOWN) {
                // ask if user wants to continue with limited functionality or pay $20/hour to use DEF as well
                while (inputOn) {
                    System.out.println("The system is partially down. Which option do you want to choose?");
                    System.out.println("1. Continue with limited functionality");
                    System.out.println("2. Pay $20/hour to enjoy full functionality taking service from DEF company");
                    choice = takeIntInput(1, 2);
                    if (choice != -1) {
                        inputOn = false;
                    }
                }

                if (choice == 1) {
                    System.out.println("Continued with limited functionality on ABC company's server");
                } else if (choice == 2) {
                    isPaying = true;
                    System.out.println("Chose to pay $20/hour to enjoy full service using both servers, all data copied to DEF's server");
                }

            } else if (currentState == ABCCompany.State.FULLY_DOWN) {
                // ask if the user wants to pay to shift to DEF
                while (inputOn) {
                    System.out.println("The system is fully down. Do you want to pay $20/hour to take service from DEF company?");
                    System.out.println("1. Yes");
                    System.out.println("2. No");
                    choice = takeIntInput(1, 2);
                    if (choice != -1) {
                        inputOn = false;
                    }
                }

                if (choice == 1) {
                    isPaying = true;
                    System.out.println("Chose to pay $20/hour to enjoy full service using DEF's server, all data copied to that server");
                } else if (choice == 2) {
                    System.out.println("Chose not to pay and remain in fully down mode");
                }
            }
        } else if (previousState == ABCCompany.State.PARTIALLY_DOWN) {
            if (currentState == ABCCompany.State.OPERATIONAL) {
                // if user was paying, send him/her a bill
                if (isPaying) {
                    //take him back to ABC
                    System.out.println("Going back to full dependency on ABC server. Total Bill: $" + getBill(100, 1000));
                    isPaying = false;
                } else {
                    System.out.println("No change in status");
                }

            } else if (currentState == ABCCompany.State.FULLY_DOWN) {
                System.out.println("No change in status");
            }
        } else if (previousState == ABCCompany.State.FULLY_DOWN) {
            if (currentState == ABCCompany.State.OPERATIONAL) {
                if (isPaying) {
                    System.out.println("Going back to full dependency on ABC server. Total Bill: $" + getBill(100, 1000));
                    isPaying = false;
                } else {
                    System.out.println("No change in status");
                }
            } else if (currentState == ABCCompany.State.PARTIALLY_DOWN) {
                System.out.println("No change in status");
            }
        }

        System.out.print("\n");
    }

    @Override
    public String toString() {
        return userName + "(Regular User)";
    }
}
